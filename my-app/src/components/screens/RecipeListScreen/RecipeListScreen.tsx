// src/components/screens/RecipeListScreen/RecipeListScreen.tsx
import React, { useState } from 'react';
import styles from './RecipeListScreen.module.css';

// --- D·ªÆ LI·ªÜU GI·∫¢ L·∫¨P ---
type Recipe = {
  id: number;
  name: string;
  image: string; // URL c·ªßa ·∫£nh
  time: number; // Ph√∫t
  difficulty: 'D·ªÖ' | 'Trung b√¨nh' | 'Kh√≥';
  calories: number;
  ingredientsUsed: number;
  ingredientsTotal: number;
  type: 'M√≥n ch√≠nh' | 'M√≥n ph·ª•' | 'Canh';
};

const MOCK_RECIPES: Recipe[] = [
  { id: 1, name: "G√† x√†o s·∫£ ·ªõt", image: "https://images.unsplash.com/photo-1604908176997-12c7553e21d3?w=500", time: 25, difficulty: "D·ªÖ", calories: 350, ingredientsUsed: 3, ingredientsTotal: 4, type: 'M√≥n ch√≠nh' },
  { id: 2, name: "Canh chua c√° l√≥c", image: "https://images.unsplash.com/photo-1598515598523-23348f435338?w=500", time: 45, difficulty: "Trung b√¨nh", calories: 280, ingredientsUsed: 4, ingredientsTotal: 6, type: 'Canh' },
  { id: 3, name: "Th·ªãt ba ch·ªâ kho tr·ª©ng", image: "https://images.unsplash.com/photo-1627042599222-3a72515004db?w=500", time: 60, difficulty: "Trung b√¨nh", calories: 550, ingredientsUsed: 2, ingredientsTotal: 4, type: 'M√≥n ch√≠nh' },
  { id: 4, name: "Rau mu·ªëng x√†o t·ªèi", image: "https://images.unsplash.com/photo-1625944239203-5419a4e33660?w=500", time: 15, difficulty: "D·ªÖ", calories: 150, ingredientsUsed: 2, ingredientsTotal: 2, type: 'M√≥n ph·ª•' },
  { id: 5, name: "B√≤ l√∫c l·∫Øc", image: "https://images.unsplash.com/photo-1594041682318-634f40435538?w=500", time: 30, difficulty: "Trung b√¨nh", calories: 480, ingredientsUsed: 3, ingredientsTotal: 5, type: 'M√≥n ch√≠nh' },
];

// --- C√ÅC COMPONENT CON ---

// Th·∫ª c√¥ng th·ª©c
const RecipeCard: React.FC<{ recipe: Recipe }> = ({ recipe }) => (
  <div className={styles.recipeCard}>
    <div className={styles.heroImage} style={{ backgroundImage: `url(${recipe.image})` }}>
      <h2 className={styles.recipeTitle}>{recipe.name}</h2>
    </div>
    <div className={styles.infoSection}>
      <div className={styles.quickInfoBar}>
        <span className={styles.quickInfoItem}>üïí {recipe.time} ph√∫t</span>
        <span className={styles.quickInfoItem}>‚≠ê {recipe.difficulty}</span>
        <span className={styles.quickInfoItem}>üî• {recipe.calories} Kcal</span>
      </div>
      <p className={styles.highlightInfo}>
        D√πng {recipe.ingredientsUsed}/{recipe.ingredientsTotal} nguy√™n li·ªáu b·∫°n c√≥
      </p>
    </div>
  </div>
);

// Tr·∫°ng th√°i kh√¥ng c√≥ k·∫øt qu·∫£
const EmptyState: React.FC<{ onBack: () => void }> = ({ onBack }) => (
  <div className={styles.emptyState}>
    <span className={styles.icon}>üë®‚Äçüç≥</span>
    <h2>√îi, kh√¥ng t√¨m th·∫•y m√≥n n√†o!</h2>
    <p>Th·ª≠ thay ƒë·ªïi ho·∫∑c th√™m b·ªõt v√†i nguy√™n li·ªáu ·ªü m√†n h√¨nh tr∆∞·ªõc xem sao nh√©!</p>
    <button className={styles.backButton} onClick={onBack}>
      Quay l·∫°i & Thay ƒë·ªïi
    </button>
  </div>
);

// Modal l·ªçc
const FilterModal: React.FC<{ onClose: () => void }> = ({ onClose }) => (
  <div className={styles.filterOverlay} onClick={onClose}>
    <div className={styles.filterModal} onClick={(e) => e.stopPropagation()}>
      <div className={styles.filterSection}>
        <h3>S·∫Øp x·∫øp theo</h3>
        <div className={styles.filterOptions}>
          <button className={`${styles.filterChip} ${styles.active}`}>Li√™n quan nh·∫•t</button>
          <button className={styles.filterChip}>Th·ªùi gian n·∫•u nhanh</button>
          <button className={styles.filterChip}>ƒê·ªô kh√≥ tƒÉng d·∫ßn</button>
        </div>
      </div>
      <div className={styles.filterSection}>
        <h3>L·ªçc theo lo·∫°i m√≥n</h3>
        <div className={styles.filterOptions}>
          <button className={styles.filterChip}>M√≥n ch√≠nh</button>
          <button className={styles.filterChip}>M√≥n ph·ª•</button>
          <button className={styles.filterChip}>Canh</button>
        </div>
      </div>
      <div className={styles.filterActions}>
        <button className={styles.resetButton}>ƒê·∫∑t l·∫°i</button>
        <button className={styles.applyButton} onClick={onClose}>Xem k·∫øt qu·∫£</button>
      </div>
    </div>
  </div>
);

// --- COMPONENT CH√çNH ---

const RecipeListScreen: React.FC = () => {
  const [recipes] = useState<Recipe[]>(MOCK_RECIPES);
  const [showFilter, setShowFilter] = useState(false);

  const recipeCount = recipes.length;

  return (
    <div className={styles.container}>
      {/* B∆Ø·ªöC 2: HEADER */}
      <header className={styles.header}>
        <button className={styles.headerButton} aria-label="Quay l·∫°i">{'<'}</button>
        <h1 className={styles.headerTitle}>G·ª£i √Ω cho b·∫°n</h1>
        <button className={styles.headerButton} aria-label="L·ªçc" onClick={() => setShowFilter(true)}>
          <span style={{fontSize: '20px'}}>üéõÔ∏è</span>
        </button>
      </header>

      {recipeCount > 0 ? (
        <>
          {/* B∆Ø·ªöC 3: T√ìM T·∫ÆT */}
          <div className={styles.summaryText}>
            T√¨m th·∫•y <strong>{recipeCount} m√≥n ngon</strong> v·ªõi nguy√™n li·ªáu c·ªßa b·∫°n!
          </div>
          
          {/* DANH S√ÅCH M√ìN ƒÇN */}
          <div className={styles.recipeList}>
            {recipes.map(recipe => <RecipeCard key={recipe.id} recipe={recipe} />)}
          </div>
        </>
      ) : (
        // B∆Ø·ªöC 6: TR·∫†NG TH√ÅI R·ªñNG
        <EmptyState onBack={() => alert("Quay v·ªÅ m√†n h√¨nh tr∆∞·ªõc...")} />
      )}

      {/* B∆Ø·ªöC 5: MODAL L·ªåC */}
      {showFilter && <FilterModal onClose={() => setShowFilter(false)} />}
    </div>
  );
};

export default RecipeListScreen;